--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         49152 B, 64 B, 12-way associative
LL cache:         4194304 B, 64 B, 16-way associative
Command:          ./sort 10000 10
Data file:        cachegrind.out.4680
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Thresholds:       0.1 100 100 100 100 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   I1mr           ILmr           Dr                   D1mr             DLmr           Dw                   D1mw             DLmw           Bc                  Bcm                Bi                 Bim          
--------------------------------------------------------------------------------
740,759,726 (100.0%) 1,730 (100.0%) 1,629 (100.0%) 289,282,722 (100.0%) 321,608 (100.0%) 1,375 (100.0%) 114,477,705 (100.0%) 269,032 (100.0%) 3,124 (100.0%) 81,486,260 (100.0%) 9,243,908 (100.0%) 9,959,079 (100.0%) 322 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   I1mr        ILmr        Dr                  D1mr            DLmr         Dw                  D1mw            DLmw           Bc                  Bcm                Bi                 Bim           file:function
--------------------------------------------------------------------------------
130,733,582 (17.65%) 13 ( 0.75%) 11 ( 0.68%) 26,122,852 ( 9.03%)    180 ( 0.06%)   0          21,923,212 (19.15%) 38,047 (14.14%)     0          18,029,656 (22.13%) 4,085,990 (44.20%) 7,227,062 (72.57%)   1 ( 0.31%)  ./stdlib/./stdlib/msort.c:msort_with_tmp.part.0
105,661,540 (14.26%)  2 ( 0.12%)  2 ( 0.12%) 50,587,760 (17.49%) 65,114 (20.25%)   0           9,207,340 ( 8.04%) 72,787 (27.06%) 1,257 (40.24%)  6,643,900 ( 8.15%)   356,307 ( 3.85%)         0            0           /home/rvreddy/merge_sort_hw/util.c:copy
 93,951,806 (12.68%)  0           0          43,362,372 (14.99%) 66,818 (20.78%)   0          21,681,186 (18.94%)      0              0                   0                  0                  0            0           /home/rvreddy/merge_sort_hw/main.c:cmp
 49,227,347 ( 6.65%)  5 ( 0.29%)  5 ( 0.31%) 19,875,546 ( 6.87%)  7,556 ( 2.35%)   0           4,908,390 ( 4.29%) 12,520 ( 4.65%)     0           4,089,207 ( 5.02%)   742,458 ( 8.03%)         0            0           /home/rvreddy/merge_sort_hw/sort_a.c:merge_a
 49,138,579 ( 6.63%)  5 ( 0.29%)  5 ( 0.31%) 19,880,928 ( 6.87%)  7,676 ( 2.39%)   0           4,908,390 ( 4.29%) 12,510 ( 4.65%)     0           4,090,632 ( 5.02%)   740,403 ( 8.01%)         0            0           /home/rvreddy/merge_sort_hw/sort_i.c:merge_i
 41,149,988 ( 5.56%) 19 ( 1.10%) 19 ( 1.17%) 12,766,086 ( 4.41%)  1,314 ( 0.41%)   0           6,916,219 ( 6.04%)    269 ( 0.10%)     0           5,304,710 ( 6.51%)    35,692 ( 0.39%)         0            0           ./malloc/./malloc/malloc.c:_int_free
 29,908,647 ( 4.04%)  2 ( 0.12%)  2 ( 0.12%) 15,297,138 ( 5.29%)  7,683 ( 2.39%)   0           4,908,390 ( 4.29%) 12,510 ( 4.65%)     0           4,089,910 ( 5.02%)   739,803 ( 8.00%)         0            0           /home/rvreddy/merge_sort_hw/sort_p.c:merge_p
 25,453,728 ( 3.44%)  7 ( 0.40%)  7 ( 0.43%)  6,934,873 ( 2.40%)  2,078 ( 0.65%)   1 ( 0.07%)  3,717,017 ( 3.25%)    436 ( 0.16%)     0           4,445,661 ( 5.46%)   175,468 ( 1.90%)         0            0           ./malloc/./malloc/malloc.c:malloc
 24,674,080 ( 3.33%)  4 ( 0.23%)  2 ( 0.12%) 11,181,461 ( 3.87%)      0            0           1,590,219 ( 1.39%)     30 ( 0.01%)     0           2,098,781 ( 2.58%)   338,429 ( 3.66%)         0            0           /home/rvreddy/merge_sort_hw/util.c:isort
 23,374,285 ( 3.16%) 20 ( 1.16%) 13 ( 0.80%) 12,798,437 ( 4.42%) 64,786 (20.14%)   0          11,853,728 (10.35%) 70,524 (26.21%)   624 (19.97%) 12,663,609 (15.54%)   401,726 ( 4.35%)         0            0           ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 20,714,802 ( 2.80%)  3 ( 0.17%)  3 ( 0.18%) 11,028,414 ( 3.81%)  4,410 ( 1.37%)   0           3,092,070 ( 2.70%)  1,560 ( 0.58%)     0           2,997,492 ( 3.68%)   515,597 ( 5.58%)         0            0           /home/rvreddy/merge_sort_hw/sort_f.c:merge_f
 20,704,573 ( 2.80%)  3 ( 0.17%)  3 ( 0.18%) 11,028,522 ( 3.81%)  7,535 ( 2.34%)   0           3,092,070 ( 2.70%) 12,510 ( 4.65%)     0           2,997,563 ( 3.68%)   514,702 ( 5.57%)         0            0           /home/rvreddy/merge_sort_hw/sort_c.c:merge_c
 20,704,068 ( 2.79%)  3 ( 0.17%)  3 ( 0.18%) 11,028,172 ( 3.81%)  5,012 ( 1.56%)   0           3,092,070 ( 2.70%)  3,130 ( 1.16%)     0           2,997,442 ( 3.68%)   514,902 ( 5.57%)         0            0           /home/rvreddy/merge_sort_hw/sort_m.c:merge_m
 19,122,584 ( 2.58%)  2 ( 0.12%)  2 ( 0.12%)  4,800,000 ( 1.66%)    236 ( 0.07%)   0           1,800,000 ( 1.57%)      0              0           2,980,646 ( 3.66%)    38,775 ( 0.42%)         0            0           ./stdlib/./stdlib/random_r.c:random_r
 17,403,380 ( 2.35%)  9 ( 0.52%)  9 ( 0.55%)  8,401,263 ( 2.90%) 75,130 (23.36%)   0           1,200,631 ( 1.05%) 29,278 (10.88%)   624 (19.97%)  1,800,193 ( 2.21%)       183 ( 0.00%)        60 ( 0.00%)   6 ( 1.86%)  /home/rvreddy/merge_sort_hw/main.c:benchmark
 13,875,444 ( 1.87%)  3 ( 0.17%)  3 ( 0.18%)  5,045,616 ( 1.74%)    562 ( 0.17%)   0           2,522,808 ( 2.20%)     60 ( 0.02%)     0           1,892,106 ( 2.32%)     3,363 ( 0.04%)         0            0           ./malloc/./malloc/malloc.c:free
 12,600,000 ( 1.70%)  3 ( 0.17%)  3 ( 0.18%)  4,800,000 ( 1.66%)    113 ( 0.04%)   0           1,200,000 ( 1.05%)      0              0           2,400,000 ( 2.95%)         0                  0            0           ./stdlib/./stdlib/random.c:random
  8,699,240 ( 1.17%)  5 ( 0.29%)  5 ( 0.31%)  3,099,720 ( 1.07%)     30 ( 0.01%)   0           1,799,850 ( 1.57%)      0              0             199,990 ( 0.25%)        14 ( 0.00%)         0            0           /home/rvreddy/merge_sort_hw/sort_i.c:sort_i
  8,699,240 ( 1.17%)  5 ( 0.29%)  5 ( 0.31%)  3,099,720 ( 1.07%)     30 ( 0.01%)   0           1,799,850 ( 1.57%)      0              0             199,990 ( 0.25%)        12 ( 0.00%)         0            0           /home/rvreddy/merge_sort_hw/sort_p.c:sort_p
  8,699,240 ( 1.17%)  5 ( 0.29%)  5 ( 0.31%)  3,099,720 ( 1.07%)     30 ( 0.01%)   0           1,799,850 ( 1.57%)      0              0             199,990 ( 0.25%)        12 ( 0.00%)         0            0           /home/rvreddy/merge_sort_hw/sort_a.c:sort_a
  5,463,232 ( 0.74%) 36 ( 2.08%) 31 ( 1.90%)  2,731,582 ( 0.94%)    727 ( 0.23%)   0                  20 ( 0.00%)      1 ( 0.00%)     1 ( 0.03%)         12 ( 0.00%)         8 ( 0.00%) 2,731,553 (27.43%) 147 (45.65%)  ???:???
  3,018,219 ( 0.41%) 53 ( 3.06%) 47 ( 2.89%)    706,909 ( 0.24%)  1,957 ( 0.61%)   0             335,214 ( 0.29%)  1,972 ( 0.73%)    26 ( 0.83%)    561,458 ( 0.69%)    14,630 ( 0.16%)         0            0           ./malloc/./malloc/malloc.c:_int_malloc
  3,000,000 ( 0.40%)  1 ( 0.06%)  1 ( 0.06%)    600,000 ( 0.21%)      0            0             600,000 ( 0.52%)     54 ( 0.02%)     0                   0                  0                  0            0           ./stdlib/./stdlib/rand.c:rand
  1,892,106 ( 0.26%)  0           0                   0               0            0                   0               0              0             630,702 ( 0.77%)         6 ( 0.00%)         0            0           ./malloc/./malloc/arena.c:free
    931,090 ( 0.13%)  5 ( 0.29%)  5 ( 0.31%)    337,640 ( 0.12%)     30 ( 0.01%)   0             194,410 ( 0.17%)      0              0              20,470 ( 0.03%)     6,408 ( 0.07%)         0            0           /home/rvreddy/merge_sort_hw/sort_c.c:sort_c
    777,640 ( 0.10%)  5 ( 0.29%)  5 ( 0.31%)    276,260 ( 0.10%)     10 ( 0.00%)   0             153,490 ( 0.13%)      0              0              20,470 ( 0.03%)     6,424 ( 0.07%)         0            0           /home/rvreddy/merge_sort_hw/sort_m.c:sort_m

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/rvreddy/merge_sort_hw/sort_p.c
--------------------------------------------------------------------------------
Ir                  I1mr       ILmr       Dr                 D1mr           DLmr       Dw                 D1mw            DLmw       Bc                 Bcm              Bi         Bim        

         .          .          .                  .              .          .                  .               .          .                  .                .          .          .           #include "util.h"
         .          .          .                  .              .          .                  .               .          .                  .                .          .          .           #include <stdlib.h>
         .          .          .                  .              .          .                  .               .          .                  .                .          .          .           
   699,930 ( 0.09%) 0          0                  0              0          0            599,940 ( 0.52%)      0          0                  0                0          0          0           static inline void merge_p(int *A, int *L, int n1, int *R, int n2) {
 1,399,860 ( 0.19%) 1 ( 0.06%) 1 ( 0.06%)   499,950 ( 0.17%)     0          0            299,970 ( 0.26%)      0          0                  0                0          0          0               int *endL = L + n1, *endR = R + n2, *pA = A;
 7,761,300 ( 1.05%) 1 ( 0.06%) 1 ( 0.06%) 5,107,540 ( 1.77%)     0          0                  0               0          0          2,553,770 ( 3.13%) 108,822 ( 1.18%) 0          0               while (L < endL && R < endR)
17,454,029 ( 2.36%) 0          0          8,431,178 ( 2.91%) 7,673 ( 2.39%) 0          3,613,362 ( 3.16%) 12,510 ( 4.65%) 0          1,204,454 ( 1.48%) 603,225 ( 6.53%) 0          0                   *pA++ = (*L <= *R) ? *L++ : *R++;
   943,319 ( 0.13%) 0          0            472,015 ( 0.16%)     0          0            163,221 ( 0.14%)      0          0            154,397 ( 0.19%)  11,080 ( 0.12%) 0          0               while (L < endL) *pA++ = *L++;
 1,250,249 ( 0.17%) 0          0            586,475 ( 0.20%)     0          0            231,897 ( 0.20%)      0          0            177,289 ( 0.22%)  16,676 ( 0.18%) 0          0               while (R < endR) *pA++ = *R++;
   399,960 ( 0.05%) 0          0            199,980 ( 0.07%)    10 ( 0.00%) 0                  0               0          0                  0                0          0          0           }
         .          .          .                  .              .          .                  .               .          .                  .                .          .          .           
 1,199,940 ( 0.16%) 2 ( 0.12%) 2 ( 0.12%)         0              0          0            599,970 ( 0.52%)      0          0                  0                0          0          0           void sort_p(int *A, int n) {
   499,980 ( 0.07%) 1 ( 0.06%) 1 ( 0.06%)   199,990 ( 0.07%)     0          0                  0               0          0            199,990 ( 0.25%)      12 ( 0.00%) 0          0               if (n <= 1) return;
         .          .          .                  .              .          .                  .               .          .                  .                .          .          .           
   599,940 ( 0.08%) 0          0             99,990 ( 0.03%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               int mid = n / 2;
   599,940 ( 0.08%) 0          0             99,990 ( 0.03%)     0          0            199,980 ( 0.17%)      0          0                  0                0          0          0               int *L = malloc(mid * sizeof(int));
   699,930 ( 0.09%) 1 ( 0.06%) 1 ( 0.06%)   199,980 ( 0.07%)     0          0            199,980 ( 0.17%)      0          0                  0                0          0          0               int *R = malloc((n - mid) * sizeof(int));
         .          .          .                  .              .          .                  .               .          .                  .                .          .          .           
   599,940 ( 0.08%) 0          0            299,970 ( 0.10%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               copy(L, A, mid);
 1,199,880 ( 0.16%) 1 ( 0.06%) 1 ( 0.06%)   499,950 ( 0.17%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               copy(R, A + mid, n - mid);
         .          .          .                  .              .          .                  .               .          .                  .                .          .          .           
   499,950 ( 0.07%) 0          0            199,980 ( 0.07%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               sort_p(L, mid);
   699,930 ( 0.09%) 0          0            299,970 ( 0.10%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               sort_p(R, n - mid);
   999,900 ( 0.13%) 0          0            599,940 ( 0.21%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               merge_p(A, L, mid, R, n - mid);
         .          .          .                  .              .          .                  .               .          .                  .                .          .          .           
   299,970 ( 0.04%) 0          0             99,990 ( 0.03%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               free(L);
   399,960 ( 0.05%) 0          0             99,990 ( 0.03%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               free(R);
   399,980 ( 0.05%) 0          0            399,980 ( 0.14%)    30 ( 0.01%) 0                  0               0          0                  0                0          0          0           }

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/rvreddy/merge_sort_hw/sort_c.c
--------------------------------------------------------------------------------
Ir                  I1mr       ILmr       Dr                 D1mr           DLmr       Dw                 D1mw            DLmw       Bc                 Bcm              Bi         Bim        

         .          .          .                  .              .          .                  .               .          .                  .                .          .          .           #include "util.h"
         .          .          .                  .              .          .                  .               .          .                  .                .          .          .           #include <stdlib.h>
         .          .          .                  .              .          .                  .               .          .                  .                .          .          .           
    71,610 ( 0.01%) 1 ( 0.06%) 1 ( 0.06%)         0              0          0             61,380 ( 0.05%)      0          0                  0                0          0          0           static inline void merge_c(int *A, int *L, int n1, int *R, int n2) {
   143,220 ( 0.02%) 1 ( 0.06%) 1 ( 0.06%)    51,150 ( 0.02%)     0          0             30,690 ( 0.03%)      0          0                  0                0          0          0               int *endL = L + n1, *endR = R + n2, *pA = A;
 5,941,539 ( 0.80%) 1 ( 0.06%) 1 ( 0.06%) 3,954,206 ( 1.37%)     0          0                  0               0          0          1,977,103 ( 2.43%)  10,355 ( 0.11%) 0          0               while (L < endL && R < endR)
14,220,410 ( 1.92%) 0          0          6,866,251 ( 2.37%) 7,525 ( 2.34%) 0          2,942,679 ( 2.57%) 12,510 ( 4.65%) 0            980,893 ( 1.20%) 494,751 ( 5.35%) 0          0                   *pA++ = (*L <= *R) ? *L++ : *R++;
   138,869 ( 0.02%) 0          0             67,320 ( 0.02%)     0          0             28,116 ( 0.02%)      0          0             19,602 ( 0.02%)   4,709 ( 0.05%) 0          0               while (L < endL) *pA++ = *L++;
   148,005 ( 0.02%) 0          0             69,135 ( 0.02%)     0          0             29,205 ( 0.03%)      0          0             19,965 ( 0.02%)   4,887 ( 0.05%) 0          0               while (R < endR) *pA++ = *R++;
    40,920 ( 0.01%) 0          0             20,460 ( 0.01%)    10 ( 0.00%) 0                  0               0          0                  0                0          0          0           }
         .          .          .                  .              .          .                  .               .          .                  .                .          .          .           
   122,820 ( 0.02%) 2 ( 0.12%) 2 ( 0.12%)         0              0          0             61,410 ( 0.05%)      0          0                  0                0          0          0           void sort_c(int *A, int n) {
    40,940 ( 0.01%) 0          0             20,470 ( 0.01%)     0          0                  0               0          0             20,470 ( 0.03%)   6,408 ( 0.07%) 0          0               if (n <= 16) {
    51,200 ( 0.01%) 0          0             20,480 ( 0.01%)     0          0             10,240 ( 0.01%)      0          0                  0                0          0          0                   isort(A, n);
    10,240 ( 0.00%) 0          0                  0              0          0                  0               0          0                  0                0          0          0                   return;
         .          .          .                  .              .          .                  .               .          .                  .                .          .          .               }
         .          .          .                  .              .          .                  .               .          .                  .                .          .          .           
    61,380 ( 0.01%) 0          0             10,230 ( 0.00%)     0          0             10,230 ( 0.01%)      0          0                  0                0          0          0               int mid = n / 2;
    61,380 ( 0.01%) 1 ( 0.06%) 1 ( 0.06%)    10,230 ( 0.00%)     0          0             20,460 ( 0.02%)      0          0                  0                0          0          0               int *L = malloc(mid * sizeof(int));
    71,610 ( 0.01%) 0          0             20,460 ( 0.01%)     0          0             20,460 ( 0.02%)      0          0                  0                0          0          0               int *R = malloc((n - mid) * sizeof(int));
         .          .          .                  .              .          .                  .               .          .                  .                .          .          .           
    61,380 ( 0.01%) 0          0             30,690 ( 0.01%)     0          0             10,230 ( 0.01%)      0          0                  0                0          0          0               copy(L, A, mid);
   122,760 ( 0.02%) 1 ( 0.06%) 1 ( 0.06%)    51,150 ( 0.02%)     0          0             10,230 ( 0.01%)      0          0                  0                0          0          0               copy(R, A + mid, n - mid);
         .          .          .                  .              .          .                  .               .          .                  .                .          .          .           
    51,150 ( 0.01%) 0          0             20,460 ( 0.01%)     0          0             10,230 ( 0.01%)      0          0                  0                0          0          0               sort_c(L, mid);
    71,610 ( 0.01%) 0          0             30,690 ( 0.01%)     0          0             10,230 ( 0.01%)      0          0                  0                0          0          0               sort_c(R, n - mid);
   102,300 ( 0.01%) 0          0             61,380 ( 0.02%)     0          0             10,230 ( 0.01%)      0          0                  0                0          0          0               merge_c(A, L, mid, R, n - mid);
         .          .          .                  .              .          .                  .               .          .                  .                .          .          .           
    30,690 ( 0.00%) 0          0             10,230 ( 0.00%)     0          0             10,230 ( 0.01%)      0          0                  0                0          0          0               free(L);
    30,690 ( 0.00%) 0          0             10,230 ( 0.00%)     0          0             10,230 ( 0.01%)      0          0                  0                0          0          0               free(R);
    40,940 ( 0.01%) 1 ( 0.06%) 1 ( 0.06%)    40,940 ( 0.01%)    30 ( 0.01%) 0                  0               0          0                  0                0          0          0           }

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/rvreddy/merge_sort_hw/sort_m.c
--------------------------------------------------------------------------------
Ir                  I1mr       ILmr       Dr                 D1mr           DLmr       Dw                 D1mw           DLmw       Bc                 Bcm              Bi         Bim        

         .          .          .                  .              .          .                  .              .          .                  .                .          .          .           #include "util.h"
         .          .          .                  .              .          .                  .              .          .                  .                .          .          .           #include <stdlib.h>
         .          .          .                  .              .          .                  .              .          .                  .                .          .          .           
    71,610 ( 0.01%) 1 ( 0.06%) 1 ( 0.06%)         0              0          0             61,380 ( 0.05%)     0          0                  0                0          0          0           static inline void merge_m(int *A, int *L, int n1, int *R, int n2) {
   143,220 ( 0.02%) 1 ( 0.06%) 1 ( 0.06%)    51,150 ( 0.02%)     0          0             30,690 ( 0.03%)     0          0                  0                0          0          0               int *endL = L + n1, *endR = R + n2, *pA = A;
 5,941,176 ( 0.80%) 1 ( 0.06%) 1 ( 0.06%) 3,953,964 ( 1.37%)     0          0                  0              0          0          1,976,982 ( 2.43%)  10,340 ( 0.11%) 0          0               while (L < endL && R < endR)
14,219,687 ( 1.92%) 0          0          6,865,873 ( 2.37%) 5,012 ( 1.56%) 0          2,942,517 ( 2.57%) 3,130 ( 1.16%) 0            980,839 ( 1.20%) 495,105 ( 5.36%) 0          0                   *pA++ = (*L <= *R) ? *L++ : *R++;
   138,493 ( 0.02%) 0          0             67,155 ( 0.02%)     0          0             28,017 ( 0.02%)     0          0             19,569 ( 0.02%)   4,578 ( 0.05%) 0          0               while (L < endL) *pA++ = *L++;
   148,962 ( 0.02%) 0          0             69,570 ( 0.02%)     0          0             29,466 ( 0.03%)     0          0             20,052 ( 0.02%)   4,879 ( 0.05%) 0          0               while (R < endR) *pA++ = *R++;
    40,920 ( 0.01%) 0          0             20,460 ( 0.01%)     0          0                  0              0          0                  0                0          0          0           }
         .          .          .                  .              .          .                  .              .          .                  .                .          .          .           
   122,820 ( 0.02%) 2 ( 0.12%) 2 ( 0.12%)         0              0          0             61,410 ( 0.05%)     0          0                  0                0          0          0           void sort_m(int *A, int n) {
    40,940 ( 0.01%) 0          0             20,470 ( 0.01%)     0          0                  0              0          0             20,470 ( 0.03%)   6,424 ( 0.07%) 0          0               if (n <= 16) {
    51,200 ( 0.01%) 0          0             20,480 ( 0.01%)     0          0             10,240 ( 0.01%)     0          0                  0                0          0          0                   isort(A, n);
    10,240 ( 0.00%) 0          0                  0              0          0                  0              0          0                  0                0          0          0                   return;
         .          .          .                  .              .          .                  .              .          .                  .                .          .          .               }
         .          .          .                  .              .          .                  .              .          .                  .                .          .          .           
    61,380 ( 0.01%) 0          0             10,230 ( 0.00%)     0          0             10,230 ( 0.01%)     0          0                  0                0          0          0               int mid = n / 2;
    61,380 ( 0.01%) 1 ( 0.06%) 1 ( 0.06%)    10,230 ( 0.00%)     0          0             20,460 ( 0.02%)     0          0                  0                0          0          0               int *L = malloc(mid * sizeof(int));
    61,380 ( 0.01%) 0          0             30,690 ( 0.01%)     0          0             10,230 ( 0.01%)     0          0                  0                0          0          0               copy(L, A, mid);
         .          .          .                  .              .          .                  .              .          .                  .                .          .          .           
    51,150 ( 0.01%) 0          0             20,460 ( 0.01%)     0          0             10,230 ( 0.01%)     0          0                  0                0          0          0               sort_m(L, mid);
   102,300 ( 0.01%) 1 ( 0.06%) 1 ( 0.06%)    40,920 ( 0.01%)     0          0             10,230 ( 0.01%)     0          0                  0                0          0          0               sort_m(A + mid, n - mid);
   143,220 ( 0.02%) 0          0             71,610 ( 0.02%)     0          0             10,230 ( 0.01%)     0          0                  0                0          0          0               merge_m(A, L, mid, A + mid, n - mid);
         .          .          .                  .              .          .                  .              .          .                  .                .          .          .           
    30,690 ( 0.00%) 0          0             10,230 ( 0.00%)     0          0             10,230 ( 0.01%)     0          0                  0                0          0          0               free(L);
    40,940 ( 0.01%) 1 ( 0.06%) 1 ( 0.06%)    40,940 ( 0.01%)    10 ( 0.00%) 0                  0              0          0                  0                0          0          0           }

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/rvreddy/merge_sort_hw/main.c
--------------------------------------------------------------------------------
Ir                  I1mr       ILmr       Dr                  D1mr            DLmr       Dw                  D1mw            DLmw         Bc               Bcm         Bi          Bim        

-- line 13 ----------------------------------------
         .          .          .                   .               .          .                   .               .            .                .           .           .          .           void sort_f(int *A, int n);
         .          .          .                   .               .          .                   .               .            .                .           .           .          .           
         .          .          .                   .               .          .                   .               .            .                .           .           .          .           typedef void (*sortFunc)(int *, int);
         .          .          .                   .               .          .                   .               .            .                .           .           .          .           
         .          .          .                   .               .          .                   .               .            .                .           .           .          .           sortFunc funcs[MAX_FUNCS];
         .          .          .                   .               .          .                   .               .            .                .           .           .          .           const char *func_names[MAX_FUNCS];
         .          .          .                   .               .          .                   .               .            .                .           .           .          .           int func_count = 0;
         .          .          .                   .               .          .                   .               .            .                .           .           .          .           
        30 ( 0.00%) 0          0                   0               0          0                  18 ( 0.00%)      0            0                0           0           0          0           void testFunc(sortFunc f, const char *name) {
        36 ( 0.00%) 0          0                  12 ( 0.00%)      1 ( 0.00%) 1 ( 0.07%)          6 ( 0.00%)      1 ( 0.00%)   1 ( 0.03%)       0           0           0          0               funcs[func_count] = f;
        36 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)         12 ( 0.00%)      0          0                   6 ( 0.00%)      1 ( 0.00%)   1 ( 0.03%)       0           0           0          0               func_names[func_count] = name;
        18 ( 0.00%) 0          0                   6 ( 0.00%)      0          0                   6 ( 0.00%)      0            0                0           0           0          0               func_count++;
        18 ( 0.00%) 0          0                  12 ( 0.00%)      0          0                   0               0            0                0           0           0          0           }
         .          .          .                   .               .          .                   .               .            .                .           .           .          .           
36,135,310 ( 4.88%) 0          0                   0               0          0          21,681,186 (18.94%)      0            0                0           0           0          0           int cmp(const void *a, const void *b) {
43,362,372 ( 5.85%) 0          0          28,908,248 ( 9.99%) 66,818 (20.78%) 0                   0               0            0                0           0           0          0               return (*(int *)a) - (*(int *)b);
14,454,124 ( 1.95%) 0          0          14,454,124 ( 5.00%)      0          0                   0               0            0                0           0           0          0           }
         .          .          .                   .               .          .                   .               .            .                .           .           .          .           
         7 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          0               0          0                   4 ( 0.00%)      0            0                0           0           0          0           void benchmark(int n, int trials) {
         6 ( 0.00%) 0          0                   1 ( 0.00%)      0          0                   2 ( 0.00%)      0            0                0           0           0          0               int *A = malloc(n * sizeof(int));
         6 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          1 ( 0.00%)      0          0                   2 ( 0.00%)      0            0                0           0           0          0               int *B = malloc(n * sizeof(int));
         4 ( 0.00%) 0          0                   0               0          0                   2 ( 0.00%)      0            0                0           0           0          0               srand(time(NULL));
         .          .          .                   .               .          .                   .               .            .                .           .           .          .           
        29 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)         20 ( 0.00%)      4 ( 0.00%) 0                   1 ( 0.00%)      0            0                7 ( 0.00%)  4 ( 0.00%)  0          0               for (int i = 0; i < func_count; i++) {
        12 ( 0.00%) 0          0                   0               0          0                   6 ( 0.00%)      0            0                0           0           0          0                   double total = 0.0;
       270 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)        192 ( 0.00%)      0          0                   6 ( 0.00%)      0            0               66 ( 0.00%) 11 ( 0.00%)  0          0                   for (int t = 0; t < trials; t++) {
 2,400,300 ( 0.32%) 1 ( 0.06%) 1 ( 0.06%)  1,800,120 ( 0.62%)      0          0                  60 ( 0.00%)      0            0          600,060 ( 0.74%) 71 ( 0.00%)  0          0                       for (int j = 0; j < n; j++)
 4,200,000 ( 0.57%) 0          0           1,200,000 ( 0.41%)      0          0           1,200,000 ( 1.05%) 29,158 (10.84%) 624 (19.97%)       0           0           0          0                           A[j] = rand();
       480 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)        180 ( 0.00%)      0          0                  60 ( 0.00%)      0            0                0           0           0          0                       memcpy(B, A, n * sizeof(int));
         .          .          .                   .               .          .                   .               .            .                .           .           .          .           
       120 ( 0.00%) 0          0                   0               0          0                 120 ( 0.00%)     60 ( 0.02%)   0                0           0           0          0                       clock_t start = clock();
       600 ( 0.00%) 0          0                 240 ( 0.00%)     60 ( 0.02%) 0                  60 ( 0.00%)      0            0                0           0          60 ( 0.00%) 6 ( 1.86%)              funcs[i](B, n);
       120 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          0               0          0                 120 ( 0.00%)     60 ( 0.02%)   0                0           0           0          0                       clock_t end = clock();
         .          .          .                   .               .          .                   .               .            .                .           .           .          .           
       540 ( 0.00%) 0          0                 240 ( 0.00%)     60 ( 0.02%) 0                  60 ( 0.00%)      0            0                0           0           0          0                       total += (double)(end - start) / CLOCKS_PER_SEC;
         .          .          .                   .               .          .                   .               .            .                .           .           .          .           
       480 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)        120 ( 0.00%)      0          0                  60 ( 0.00%)      0            0                0           0           0          0                       qsort(A, n, sizeof(int), cmp);
 2,400,300 ( 0.32%) 0          0           1,800,120 ( 0.62%)      0          0                  60 ( 0.00%)      0            0          600,060 ( 0.74%) 70 ( 0.00%)  0          0                       for (int j = 0; j < n; j++) {
 8,400,000 ( 1.13%) 1 ( 0.06%) 1 ( 0.06%)  3,600,000 ( 1.24%) 75,000 (23.32%) 0                   0               0            0          600,000 ( 0.74%) 27 ( 0.00%)  0          0                           if (A[j] != B[j]) {
         .          .          .                   .               .          .                   .               .            .                .           .           .          .                               printf("Error in %s\n", func_names[i]);
         .          .          .                   .               .          .                   .               .            .                .           .           .          .                               exit(1);
         .          .          .                   .               .          .                   .               .            .                .           .           .          .                           }
         .          .          .                   .               .          .                   .               .            .                .           .           .          .                       }
         .          .          .                   .               .          .                   .               .            .                .           .           .          .                   }
        96 ( 0.00%) 0          0                  24 ( 0.00%)      6 ( 0.00%) 0                   6 ( 0.00%)      0            0                0           0           0          0                   printf("%s: %f s\n", func_names[i], total / trials);
         .          .          .                   .               .          .                   .               .            .                .           .           .          .               }
         3 ( 0.00%) 0          0                   1 ( 0.00%)      0          0                   1 ( 0.00%)      0            0                0           0           0          0               free(A);
         3 ( 0.00%) 0          0                   1 ( 0.00%)      0          0                   1 ( 0.00%)      0            0                0           0           0          0               free(B);
         4 ( 0.00%) 0          0                   3 ( 0.00%)      0          0                   0               0            0                0           0           0          0           }
         .          .          .                   .               .          .                   .               .            .                .           .           .          .           
         6 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          0               0          0                   3 ( 0.00%)      0            0                0           0           0          0           int main(int argc, char *argv[]) {
         2 ( 0.00%) 0          0                   1 ( 0.00%)      0          0                   0               0            0                1 ( 0.00%)  1 ( 0.00%)  0          0               if (argc != 3) {
         .          .          .                   .               .          .                   .               .            .                .           .           .          .                   printf("Usage: %s <n> <trials>\n", argv[0]);
         .          .          .                   .               .          .                   .               .            .                .           .           .          .                   return 1;
         .          .          .                   .               .          .                   .               .            .                .           .           .          .               }
         6 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          2 ( 0.00%)      1 ( 0.00%) 0                   2 ( 0.00%)      0            0                0           0           0          0               int n = atoi(argv[1]);
         6 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          2 ( 0.00%)      0          0                   2 ( 0.00%)      0            0                0           0           0          0               int trials = atoi(argv[2]);
         .          .          .                   .               .          .                   .               .            .                .           .           .          .           
         .          .          .                   .               .          .                   .               .            .                .           .           .          .               // Detect which executable we are
         6 ( 0.00%) 0          0                   2 ( 0.00%)      0          0                   2 ( 0.00%)      0            0                0           0           0          0               char *progname = strrchr(argv[0], '/');
         6 ( 0.00%) 0          0                   2 ( 0.00%)      0          0                   1 ( 0.00%)      0            0                1 ( 0.00%)  0           0          0               progname = (progname) ? progname + 1 : argv[0];
         .          .          .                   .               .          .                   .               .            .                .           .           .          .           
         7 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          1 ( 0.00%)      0          0                   1 ( 0.00%)      0            0                1 ( 0.00%)  1 ( 0.00%)  0          0               if (strcmp(progname, "sort_a") == 0) {
         .          .          .                   .               .          .                   .               .            .                .           .           .          .                   testFunc(sort_a, "sort_a");
         7 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          1 ( 0.00%)      0          0                   1 ( 0.00%)      0            0                1 ( 0.00%)  1 ( 0.00%)  0          0               } else if (strcmp(progname, "sort_i") == 0) {
         .          .          .                   .               .          .                   .               .            .                .           .           .          .                   testFunc(sort_i, "sort_i");
         7 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          1 ( 0.00%)      0          0                   1 ( 0.00%)      0            0                1 ( 0.00%)  1 ( 0.00%)  0          0               } else if (strcmp(progname, "sort_p") == 0) {
         .          .          .                   .               .          .                   .               .            .                .           .           .          .                   testFunc(sort_p, "sort_p");
         7 ( 0.00%) 0          0                   1 ( 0.00%)      0          0                   1 ( 0.00%)      0            0                1 ( 0.00%)  1 ( 0.00%)  0          0               } else if (strcmp(progname, "sort_c") == 0) {
         .          .          .                   .               .          .                   .               .            .                .           .           .          .                   testFunc(sort_c, "sort_c");
         7 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          1 ( 0.00%)      0          0                   1 ( 0.00%)      0            0                1 ( 0.00%)  1 ( 0.00%)  0          0               } else if (strcmp(progname, "sort_m") == 0) {
         .          .          .                   .               .          .                   .               .            .                .           .           .          .                   testFunc(sort_m, "sort_m");
         7 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          1 ( 0.00%)      0          0                   1 ( 0.00%)      0            0                1 ( 0.00%)  1 ( 0.00%)  0          0               } else if (strcmp(progname, "sort_f") == 0) {
         .          .          .                   .               .          .                   .               .            .                .           .           .          .                   testFunc(sort_f, "sort_f");
         .          .          .                   .               .          .                   .               .            .                .           .           .          .               } else {
         .          .          .                   .               .          .                   .               .            .                .           .           .          .                   // Default: run all
         5 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          0               0          0                   1 ( 0.00%)      0            0                0           0           0          0                   testFunc(sort_a, "sort_a");
         5 ( 0.00%) 0          0                   0               0          0                   1 ( 0.00%)      0            0                0           0           0          0                   testFunc(sort_i, "sort_i");
         5 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          0               0          0                   1 ( 0.00%)      0            0                0           0           0          0                   testFunc(sort_p, "sort_p");
         5 ( 0.00%) 0          0                   0               0          0                   1 ( 0.00%)      0            0                0           0           0          0                   testFunc(sort_c, "sort_c");
         5 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          0               0          0                   1 ( 0.00%)      0            0                0           0           0          0                   testFunc(sort_m, "sort_m");
         5 ( 0.00%) 0          0                   0               0          0                   1 ( 0.00%)      0            0                0           0           0          0                   testFunc(sort_f, "sort_f");
         .          .          .                   .               .          .                   .               .            .                .           .           .          .               }
         .          .          .                   .               .          .                   .               .            .                .           .           .          .           
         5 ( 0.00%) 0          0                   2 ( 0.00%)      0          0                   1 ( 0.00%)      0            0                0           0           0          0               benchmark(n, trials);
         1 ( 0.00%) 0          0                   0               0          0                   0               0            0                0           0           0          0               return 0;
         2 ( 0.00%) 0          0                   2 ( 0.00%)      1 ( 0.00%) 0                   0               0            0                0           0           0          0           }

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/rvreddy/merge_sort_hw/sort_i.c
--------------------------------------------------------------------------------
Ir                  I1mr       ILmr       Dr                  D1mr           DLmr       Dw                 D1mw            DLmw       Bc                 Bcm              Bi         Bim        

         .          .          .                   .              .          .                  .               .          .                  .                .          .          .           #include "util.h"
         .          .          .                   .              .          .                  .               .          .                  .                .          .          .           #include <stdlib.h>
         .          .          .                   .              .          .                  .               .          .                  .                .          .          .           
   699,930 ( 0.09%) 1 ( 0.06%) 1 ( 0.06%)          0              0          0            599,940 ( 0.52%)      0          0                  0                0          0          0           static inline void merge_i(int *A, int *L, int n1, int *R, int n2) {
   299,970 ( 0.04%) 0          0                   0              0          0            299,970 ( 0.26%)      0          0                  0                0          0          0               int i = 0, j = 0, k = 0;
 7,763,466 ( 1.05%) 1 ( 0.06%) 1 ( 0.06%)  5,108,984 ( 1.77%)     0          0                  0               0          0          2,554,492 ( 3.13%) 109,493 ( 1.18%) 0          0               while (i < n1 && j < n2)
36,732,922 ( 4.96%) 1 ( 0.06%) 1 ( 0.06%) 13,251,931 ( 4.58%) 7,666 ( 2.38%) 0          3,614,163 ( 3.16%) 12,510 ( 4.65%) 0          1,204,721 ( 1.48%) 603,472 ( 6.53%) 0          0                   A[k++] = (L[i] <= R[j]) ? L[i++] : R[j++];
   509,394 ( 0.07%) 1 ( 0.06%) 1 ( 0.06%)    309,556 ( 0.11%)     0          0                  0               0          0            154,778 ( 0.19%)  11,235 ( 0.12%) 0          0               while (i < n1)
   876,608 ( 0.12%) 0          0             273,940 ( 0.09%)     0          0            164,364 ( 0.14%)      0          0                  0                0          0          0                   A[k++] = L[i++];
   629,913 ( 0.09%) 1 ( 0.06%) 1 ( 0.06%)    353,282 ( 0.12%)     0          0                  0               0          0            176,641 ( 0.22%)  16,203 ( 0.18%) 0          0               while (j < n2)
 1,226,416 ( 0.17%) 0          0             383,255 ( 0.13%)     0          0            229,953 ( 0.20%)      0          0                  0                0          0          0                   A[k++] = R[j++];
   399,960 ( 0.05%) 0          0             199,980 ( 0.07%)    10 ( 0.00%) 0                  0               0          0                  0                0          0          0           }
         .          .          .                   .              .          .                  .               .          .                  .                .          .          .           
 1,199,940 ( 0.16%) 1 ( 0.06%) 1 ( 0.06%)          0              0          0            599,970 ( 0.52%)      0          0                  0                0          0          0           void sort_i(int *A, int n) {
   499,980 ( 0.07%) 1 ( 0.06%) 1 ( 0.06%)    199,990 ( 0.07%)     0          0                  0               0          0            199,990 ( 0.25%)      14 ( 0.00%) 0          0               if (n <= 1) return;
         .          .          .                   .              .          .                  .               .          .                  .                .          .          .           
   599,940 ( 0.08%) 0          0              99,990 ( 0.03%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               int mid = n / 2;
   599,940 ( 0.08%) 1 ( 0.06%) 1 ( 0.06%)     99,990 ( 0.03%)     0          0            199,980 ( 0.17%)      0          0                  0                0          0          0               int *L = malloc(mid * sizeof(int));
   699,930 ( 0.09%) 0          0             199,980 ( 0.07%)     0          0            199,980 ( 0.17%)      0          0                  0                0          0          0               int *R = malloc((n - mid) * sizeof(int));
         .          .          .                   .              .          .                  .               .          .                  .                .          .          .           
   599,940 ( 0.08%) 0          0             299,970 ( 0.10%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               copy(L, A, mid);
 1,199,880 ( 0.16%) 1 ( 0.06%) 1 ( 0.06%)    499,950 ( 0.17%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               copy(R, A + mid, n - mid);
         .          .          .                   .              .          .                  .               .          .                  .                .          .          .           
   499,950 ( 0.07%) 0          0             199,980 ( 0.07%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               sort_i(L, mid);
   699,930 ( 0.09%) 1 ( 0.06%) 1 ( 0.06%)    299,970 ( 0.10%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               sort_i(R, n - mid);
   999,900 ( 0.13%) 0          0             599,940 ( 0.21%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               merge_i(A, L, mid, R, n - mid);
         .          .          .                   .              .          .                  .               .          .                  .                .          .          .           
   299,970 ( 0.04%) 0          0              99,990 ( 0.03%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               free(L);
   399,960 ( 0.05%) 0          0              99,990 ( 0.03%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               free(R);
   399,980 ( 0.05%) 0          0             399,980 ( 0.14%)    30 ( 0.01%) 0                  0               0          0                  0                0          0          0           }

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/rvreddy/merge_sort_hw/sort_a.c
--------------------------------------------------------------------------------
Ir                  I1mr       ILmr       Dr                  D1mr           DLmr       Dw                 D1mw            DLmw       Bc                 Bcm              Bi         Bim        

         .          .          .                   .              .          .                  .               .          .                  .                .          .          .           #include "util.h"
         .          .          .                   .              .          .                  .               .          .                  .                .          .          .           #include <stdlib.h>
         .          .          .                   .              .          .                  .               .          .                  .                .          .          .           
   799,920 ( 0.11%) 1 ( 0.06%) 1 ( 0.06%)          0              0          0            599,940 ( 0.52%)      0          0                  0                0          0          0           static void merge_a(int *A, int *L, int n1, int *R, int n2) {
   299,970 ( 0.04%) 1 ( 0.06%) 1 ( 0.06%)          0              0          0            299,970 ( 0.26%)      0          0                  0                0          0          0               int i = 0, j = 0, k = 0;
 7,759,191 ( 1.05%) 1 ( 0.06%) 1 ( 0.06%)  5,106,134 ( 1.77%)     0          0                  0               0          0          2,553,067 ( 3.13%) 108,557 ( 1.17%) 0          0               while (i < n1 && j < n2)
36,714,107 ( 4.96%) 1 ( 0.06%) 1 ( 0.06%) 13,244,968 ( 4.58%) 7,546 ( 2.35%) 0          3,612,264 ( 3.16%) 12,520 ( 4.65%) 0          1,204,088 ( 1.48%) 603,549 ( 6.53%) 0          0                   A[k++] = (L[i] <= R[j]) ? L[i++] : R[j++];
   508,710 ( 0.07%) 1 ( 0.06%) 1 ( 0.06%)    309,206 ( 0.11%)     0          0                  0               0          0            154,603 ( 0.19%)  13,753 ( 0.15%) 0          0               while (i < n1)
   873,808 ( 0.12%) 0          0             273,065 ( 0.09%)     0          0            163,839 ( 0.14%)      0          0                  0                0          0          0                   A[k++] = L[i++];
   632,337 ( 0.09%) 0          0             354,898 ( 0.12%)     0          0                  0               0          0            177,449 ( 0.22%)  16,599 ( 0.18%) 0          0               while (j < n2)
 1,239,344 ( 0.17%) 0          0             387,295 ( 0.13%)     0          0            232,377 ( 0.20%)      0          0                  0                0          0          0                   A[k++] = R[j++];
   399,960 ( 0.05%) 0          0             199,980 ( 0.07%)    10 ( 0.00%) 0                  0               0          0                  0                0          0          0           }
         .          .          .                   .              .          .                  .               .          .                  .                .          .          .           
 1,199,940 ( 0.16%) 2 ( 0.12%) 2 ( 0.12%)          0              0          0            599,970 ( 0.52%)      0          0                  0                0          0          0           void sort_a(int *A, int n) {
   499,980 ( 0.07%) 1 ( 0.06%) 1 ( 0.06%)    199,990 ( 0.07%)     0          0                  0               0          0            199,990 ( 0.25%)      12 ( 0.00%) 0          0               if (n <= 1) return;
         .          .          .                   .              .          .                  .               .          .                  .                .          .          .           
   599,940 ( 0.08%) 0          0              99,990 ( 0.03%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               int mid = n / 2;
   599,940 ( 0.08%) 0          0              99,990 ( 0.03%)     0          0            199,980 ( 0.17%)      0          0                  0                0          0          0               int *L = malloc(mid * sizeof(int));
   699,930 ( 0.09%) 1 ( 0.06%) 1 ( 0.06%)    199,980 ( 0.07%)     0          0            199,980 ( 0.17%)      0          0                  0                0          0          0               int *R = malloc((n - mid) * sizeof(int));
         .          .          .                   .              .          .                  .               .          .                  .                .          .          .           
   599,940 ( 0.08%) 0          0             299,970 ( 0.10%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               copy(L, A, mid);
 1,199,880 ( 0.16%) 1 ( 0.06%) 1 ( 0.06%)    499,950 ( 0.17%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               copy(R, A + mid, n - mid);
         .          .          .                   .              .          .                  .               .          .                  .                .          .          .           
   499,950 ( 0.07%) 0          0             199,980 ( 0.07%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               sort_a(L, mid);
   699,930 ( 0.09%) 0          0             299,970 ( 0.10%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               sort_a(R, n - mid);
   999,900 ( 0.13%) 0          0             599,940 ( 0.21%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               merge_a(A, L, mid, R, n - mid);
         .          .          .                   .              .          .                  .               .          .                  .                .          .          .           
   299,970 ( 0.04%) 0          0              99,990 ( 0.03%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               free(L);
   399,960 ( 0.05%) 0          0              99,990 ( 0.03%)     0          0             99,990 ( 0.09%)      0          0                  0                0          0          0               free(R);
   399,980 ( 0.05%) 0          0             399,980 ( 0.14%)    30 ( 0.01%) 0                  0               0          0                  0                0          0          0           }

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/rvreddy/merge_sort_hw/sort_f.c
--------------------------------------------------------------------------------
Ir                  I1mr       ILmr       Dr                 D1mr           DLmr       Dw                 D1mw           DLmw       Bc                 Bcm              Bi         Bim        

         .          .          .                  .              .          .                  .              .          .                  .                .          .          .           #include "util.h"
         .          .          .                  .              .          .                  .              .          .                  .                .          .          .           #include <stdlib.h>
         .          .          .                  .              .          .                  .              .          .                  .                .          .          .           
    81,840 ( 0.01%) 0          0                  0              0          0             61,380 ( 0.05%)     0          0                  0                0          0          0           static void merge_f(int *A, int *L, int n1, int *R, int n2) {
   143,220 ( 0.02%) 1 ( 0.06%) 1 ( 0.06%)    51,150 ( 0.02%)     0          0             30,690 ( 0.03%)     0          0                  0                0          0          0               int *endL = L + n1, *endR = R + n2, *pA = A;
 5,941,326 ( 0.80%) 1 ( 0.06%) 1 ( 0.06%) 3,954,064 ( 1.37%)     0          0                  0              0          0          1,977,032 ( 2.43%)  10,321 ( 0.11%) 0          0               while (L < endL && R < endR)
14,220,914 ( 1.92%) 0          0          6,866,370 ( 2.37%) 4,410 ( 1.37%) 0          2,942,730 ( 2.57%) 1,560 ( 0.58%) 0            980,910 ( 1.20%) 495,967 ( 5.37%) 0          0                   *pA++ = (*L <= *R) ? *L++ : *R++;
   135,838 ( 0.02%) 1 ( 0.06%) 1 ( 0.06%)    65,990 ( 0.02%)     0          0             27,318 ( 0.02%)     0          0             19,336 ( 0.02%)   4,361 ( 0.05%) 0          0               while (L < endL) *pA++ = *L++;
   150,744 ( 0.02%) 0          0             70,380 ( 0.02%)     0          0             29,952 ( 0.03%)     0          0             20,214 ( 0.02%)   4,948 ( 0.05%) 0          0               while (R < endR) *pA++ = *R++;
    40,920 ( 0.01%) 0          0             20,460 ( 0.01%)     0          0                  0              0          0                  0                0          0          0           }
         .          .          .                  .              .          .                  .              .          .                  .                .          .          .           
         .          .          .                  .              .          .                  .              .          .                  .                .          .          .           // internal recursive function
   143,290 ( 0.02%) 1 ( 0.06%) 1 ( 0.06%)         0              0          0             81,880 ( 0.07%)     0          0                  0                0          0          0           static void sort_f_recursive(int *A, int n, int *temp) {
    40,940 ( 0.01%) 0          0             20,470 ( 0.01%)     0          0                  0              0          0             20,470 ( 0.03%)   7,174 ( 0.08%) 0          0               if (n <= 16) {
    51,200 ( 0.01%) 0          0             20,480 ( 0.01%)     0          0             10,240 ( 0.01%)     0          0                  0                0          0          0                   isort(A, n);
    10,240 ( 0.00%) 0          0                  0              0          0                  0              0          0                  0                0          0          0                   return;
         .          .          .                  .              .          .                  .              .          .                  .                .          .          .               }
         .          .          .                  .              .          .                  .              .          .                  .                .          .          .           
    61,380 ( 0.01%) 1 ( 0.06%) 1 ( 0.06%)    10,230 ( 0.00%)     0          0             10,230 ( 0.01%)     0          0                  0                0          0          0               int mid = n / 2;
    61,380 ( 0.01%) 0          0             30,690 ( 0.01%)     0          0             10,230 ( 0.01%)     0          0                  0                0          0          0               copy(temp, A, mid);
         .          .          .                  .              .          .                  .              .          .                  .                .          .          .           
    61,380 ( 0.01%) 0          0             30,690 ( 0.01%)     0          0             10,230 ( 0.01%)     0          0                  0                0          0          0               sort_f_recursive(temp, mid, A);
   112,530 ( 0.02%) 1 ( 0.06%) 1 ( 0.06%)    51,150 ( 0.02%)     0          0             10,230 ( 0.01%)     0          0                  0                0          0          0               sort_f_recursive(A + mid, n - mid, A);
         .          .          .                  .              .          .                  .              .          .                  .                .          .          .           
   143,220 ( 0.02%) 0          0             71,610 ( 0.02%)     0          0             10,230 ( 0.01%)     0          0                  0                0          0          0               merge_f(A, temp, mid, A + mid, n - mid);
    40,940 ( 0.01%) 0          0             40,940 ( 0.01%)    10 ( 0.00%) 0                  0              0          0                  0                0          0          0           }
         .          .          .                  .              .          .                  .              .          .                  .                .          .          .           
         .          .          .                  .              .          .                  .              .          .                  .                .          .          .           // public wrapper
        60 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)         0              0          0                 30 ( 0.00%)     0          0                  0                0          0          0           void sort_f(int *A, int n) {
       100 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)        10 ( 0.00%)     0          0                 20 ( 0.00%)     0          0                  0                0          0          0               int *temp = malloc(n / 2 * sizeof(int));
        60 ( 0.00%) 0          0                 30 ( 0.00%)     0          0                 10 ( 0.00%)     0          0                  0                0          0          0               sort_f_recursive(A, n, temp);
        30 ( 0.00%) 0          0                 10 ( 0.00%)     0          0                 10 ( 0.00%)     0          0                  0                0          0          0               free(temp);
        30 ( 0.00%) 0          0                 20 ( 0.00%)    10 ( 0.00%) 0                  0              0          0                  0                0          0          0           }

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/rvreddy/merge_sort_hw/util.c
--------------------------------------------------------------------------------
Ir                  I1mr       ILmr       Dr                  D1mr            DLmr       Dw                 D1mw            DLmw           Bc                 Bcm              Bi         Bim        

         .          .          .                   .               .          .                  .               .              .                  .                .          .          .           #include "util.h"
         .          .          .                   .               .          .                  .               .              .                  .                .          .          .           
 3,845,160 ( 0.52%) 1 ( 0.06%) 1 ( 0.06%)          0               0          0          2,563,440 ( 2.24%)     90 ( 0.03%)     0                  0                0          0          0           void copy(int *dest, int *src, int n) {
27,216,460 ( 3.67%) 1 ( 0.06%) 1 ( 0.06%) 19,290,840 ( 6.67%)      0          0            640,860 ( 0.56%)      0              0          6,643,900 ( 8.15%) 356,307 ( 3.85%) 0          0               for (int i = 0; i < n; i++)
72,036,480 ( 9.72%) 0          0          30,015,200 (10.38%) 65,114 (20.25%) 0          6,003,040 ( 5.24%) 72,697 (27.02%) 1,257 (40.24%)         0                0          0          0                   dest[i] = src[i];
 2,563,440 ( 0.35%) 0          0           1,281,720 ( 0.44%)      0          0                  0               0              0                  0                0          0          0           }
         .          .          .                   .               .          .                  .               .              .                  .                .          .          .           
   153,600 ( 0.02%) 0          0                   0               0          0             92,160 ( 0.08%)     30 ( 0.01%)     0                  0                0          0          0           void isort(int *A, int n) {
 1,230,720 ( 0.17%) 0          0             869,280 ( 0.30%)      0          0             30,720 ( 0.03%)      0              0            300,000 ( 0.37%)  31,587 ( 0.34%) 0          0               for (int i = 1; i < n; i++) {
 1,884,960 ( 0.25%) 1 ( 0.06%) 1 ( 0.06%)    807,840 ( 0.28%)      0          0            269,280 ( 0.24%)      0              0                  0                0          0          0                   int key = A[i];
   807,840 ( 0.11%) 0          0             269,280 ( 0.09%)      0          0            269,280 ( 0.24%)      0              0                  0                0          0          0                   int j = i - 1;
 9,086,854 ( 1.23%) 3 ( 0.17%) 1 ( 0.06%)  4,408,787 ( 1.52%)      0          0                  0               0              0          1,798,781 ( 2.21%) 306,842 ( 3.32%) 0          0                   while (j >= 0 && A[j] > key) {
 8,573,487 ( 1.16%) 0          0           3,297,495 ( 1.14%)      0          0            659,499 ( 0.58%)      0              0                  0                0          0          0                       A[j + 1] = A[j];
   659,499 ( 0.09%) 0          0             659,499 ( 0.23%)      0          0                  0               0              0                  0                0          0          0                       j--;
         .          .          .                   .               .          .                  .               .              .                  .                .          .          .                   }
 2,154,240 ( 0.29%) 0          0             807,840 ( 0.28%)      0          0            269,280 ( 0.24%)      0              0                  0                0          0          0                   A[j + 1] = key;
         .          .          .                   .               .          .                  .               .              .                  .                .          .          .               }
   122,880 ( 0.02%) 0          0              61,440 ( 0.02%)      0          0                  0               0              0                  0                0          0          0           }

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./malloc/./malloc/arena.c
  ./malloc/./malloc/malloc.c
  ./stdlib/./stdlib/msort.c
  ./stdlib/./stdlib/rand.c
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                   I1mr        ILmr        Dr                   D1mr             DLmr       Dw                  D1mw             DLmw           Bc                  Bcm                Bi          Bim        
--------------------------------------------------------------------------------
460,622,302 (62.18%) 78 ( 4.51%) 76 ( 4.67%) 211,861,027 (73.24%) 247,087 (76.83%) 1 ( 0.07%) 63,571,605 (55.53%) 156,837 (58.30%) 1,883 (60.28%) 32,466,508 (39.84%) 4,482,835 (48.50%) 60 ( 0.00%) 6 ( 1.86%)  events annotated

